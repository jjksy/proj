buildscript {
	ext {
		springBootVersion = '2.1.4.RELEASE'
	}
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		mavenCentral()
	}

	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
		classpath "org.asciidoctor:asciidoctor-gradle-jvm:3.3.2"
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.asciidoctor.jvm.convert'

	sourceCompatibility = 1.8

	repositories {
		mavenCentral()
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
		asciidoctorExt
	}

	// 모든 모듈에서 사용하는 라이브러리
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-freemarker'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-actuator'
		//implementation 'org.springframework.boot:spring-boot-starter-data-redis'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

		// Auto Configuration 설정 포함하기
		implementation "org.springframework.boot:spring-boot-autoconfigure"
		implementation "org.springframework.boot:spring-boot-autoconfigure-processor"

		//json null
//        implementation 'com.fasterxml.jackson.core:jackson-annotations:2.12.0'

		//http
		implementation 'com.mashape.unirest:unirest-java:1.4.9'

		implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

		//random uuid
		implementation 'org.apache.commons:commons-lang3:3.12.0'

		// 특정 자바에서 build 실패시
		implementation group: 'javax.interceptor', name: 'javax.interceptor-api', version: '1.2.2'

		implementation 'io.springfox:springfox-swagger2:2.6.1'
		implementation 'io.springfox:springfox-swagger-ui:2.6.1'
		implementation 'net.rakugakibox.util:yaml-resource-bundle:1.1'
		implementation 'com.google.code.gson:gson'
		compileOnly 'org.projectlombok:lombok'
		runtimeOnly 'com.h2database:h2'
		runtimeOnly 'mysql:mysql-connector-java'
		annotationProcessor 'org.projectlombok:lombok'
		annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
		testImplementation 'org.springframework.security:spring-security-test'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'

		testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
		testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
		testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'
		testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
		testImplementation 'org.assertj:assertj-core'
		implementation 'org.springframework.boot:spring-boot-starter-security'
	}

	ext {
		snippetsDir = file('build/generated-snippets')
	}

	test {
		useJUnitPlatform()
	}

	asciidoctor {
		dependsOn test
		configurations 'asciidoctorExt'
		sourceDir 'src/main/asciidoc'
		outputDir 'build/docs/'
		//attributes 'snippets': file('build/generated-snippets')
		attributes 'snippets': snippetsDir
	}

	bootJar {
		dependsOn asciidoctor
		from ("${asciidoctor.outputDir}/") {
			into 'static/docs'
		}
	}
}